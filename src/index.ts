import { BrowserWindow, app, dialog, ipcMain, session } from 'electron'
import { existsSync } from 'fs'
import fs from 'fs/promises'
import path from 'path'
import { GeneratorOptions } from './configuration/GeneratorOptions'
import os from 'os'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  mainWindow.webContents.openDevTools()

  ipcMain.handle('dialog:selectProject', async (e, args) => {
    const { canceled, filePaths } = await dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory']
    })
    console.log(e.processId, args)
    if (!canceled) {
      return filePaths[0]
    }
  })

  ipcMain.handle('load:form', async (e, id: string) => {
    const file = path.join(app.getPath('userData'), `${id}.json`)

    if (existsSync(file)) {
      return JSON.parse(await fs.readFile(file, { encoding: 'utf-8' }))
    }

    return null
  })

  ipcMain.handle('save:form', async (e, form: GeneratorOptions) => {
    if (!form?.formOptions?.id) return

    const file = path.join(app.getPath('userData'), `${form.formOptions.id}.json`)

    await fs.writeFile(file, JSON.stringify(form))
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

const reactDevToolsPath = path.join(
  app.getPath('appData'),
  '..',
  `Local/Google/Chrome/User Data/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.28.0_1`
)
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
app.whenReady().then(async () => {
  await session.defaultSession.loadExtension(reactDevToolsPath)
})
